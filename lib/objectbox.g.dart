// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/data/models/configuration_entity.dart';
import 'src/data/models/data_entity.dart';
import 'src/data/models/sync_device_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 8095617417935777367),
    name: 'DataEntity',
    lastPropertyId: const obx_int.IdUid(7, 6263159733768399507),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4814854763836305094),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 390838745052845430),
        name: 'data',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7333676248898096708),
        name: 'tableName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1278620971552686769),
        name: 'entityId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1640554381242179226),
        name: 'operation',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1307755361691726201),
        name: 'entity',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6263159733768399507),
        name: 'isSynced',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 2751842997314007542),
    name: 'ConfigurationEntity',
    lastPropertyId: const obx_int.IdUid(10, 2755131843964416427),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3629231878171608271),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3186111696241817611),
        name: 'currentDeviceId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2506227871816325925),
        name: 'accountKey',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8582917094621816919),
        name: 'baseUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5903685566757609362),
        name: 'remoteEndpoint',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 316672047324170772),
        name: 'localEndpoint',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6841203765712350909),
        name: 'addSyncDeviceEndpoint',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8711626558886932794),
        name: 'authToken',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7580051042323978735),
        name: 'userId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2755131843964416427),
        name: 'extras',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 1757007729880252278),
    name: 'SyncDeviceEntity',
    lastPropertyId: const obx_int.IdUid(3, 687172485623488665),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6748703512524815105),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 877634275871827526),
        name: 'deviceId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 687172485623488665),
        name: 'userId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 1757007729880252278),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    DataEntity: obx_int.EntityDefinition<DataEntity>(
      model: _entities[0],
      toOneRelations: (DataEntity object) => [],
      toManyRelations: (DataEntity object) => {},
      getId: (DataEntity object) => object.id,
      setId: (DataEntity object, int id) {
        object.id = id;
      },
      objectToFB: (DataEntity object, fb.Builder fbb) {
        final dataOffset = fbb.writeString(object.data);
        final tableNameOffset = fbb.writeString(object.tableName);
        final entityIdOffset = object.entityId == null
            ? null
            : fbb.writeString(object.entityId!);
        final operationOffset = fbb.writeString(object.operation);
        final entityOffset = fbb.writeString(object.entity);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, dataOffset);
        fbb.addOffset(2, tableNameOffset);
        fbb.addOffset(3, entityIdOffset);
        fbb.addOffset(4, operationOffset);
        fbb.addOffset(5, entityOffset);
        fbb.addBool(6, object.isSynced);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final dataParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final tableNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final entityIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final operationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final entityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final isSyncedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final object = DataEntity(
          id: idParam,
          data: dataParam,
          tableName: tableNameParam,
          entityId: entityIdParam,
          operation: operationParam,
          entity: entityParam,
          isSynced: isSyncedParam,
        );

        return object;
      },
    ),
    ConfigurationEntity: obx_int.EntityDefinition<ConfigurationEntity>(
      model: _entities[1],
      toOneRelations: (ConfigurationEntity object) => [],
      toManyRelations: (ConfigurationEntity object) => {},
      getId: (ConfigurationEntity object) => object.id,
      setId: (ConfigurationEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ConfigurationEntity object, fb.Builder fbb) {
        final currentDeviceIdOffset = object.currentDeviceId == null
            ? null
            : fbb.writeString(object.currentDeviceId!);
        final accountKeyOffset = object.accountKey == null
            ? null
            : fbb.writeString(object.accountKey!);
        final baseUrlOffset = object.baseUrl == null
            ? null
            : fbb.writeString(object.baseUrl!);
        final remoteEndpointOffset = object.remoteEndpoint == null
            ? null
            : fbb.writeString(object.remoteEndpoint!);
        final localEndpointOffset = object.localEndpoint == null
            ? null
            : fbb.writeString(object.localEndpoint!);
        final addSyncDeviceEndpointOffset = object.addSyncDeviceEndpoint == null
            ? null
            : fbb.writeString(object.addSyncDeviceEndpoint!);
        final authTokenOffset = object.authToken == null
            ? null
            : fbb.writeString(object.authToken!);
        final userIdOffset = object.userId == null
            ? null
            : fbb.writeString(object.userId!);
        final extrasOffset = object.extras == null
            ? null
            : fbb.writeString(object.extras!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, currentDeviceIdOffset);
        fbb.addOffset(2, accountKeyOffset);
        fbb.addOffset(3, baseUrlOffset);
        fbb.addOffset(4, remoteEndpointOffset);
        fbb.addOffset(5, localEndpointOffset);
        fbb.addOffset(6, addSyncDeviceEndpointOffset);
        fbb.addOffset(7, authTokenOffset);
        fbb.addOffset(8, userIdOffset);
        fbb.addOffset(9, extrasOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final currentDeviceIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final accountKeyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final baseUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final remoteEndpointParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final localEndpointParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final addSyncDeviceEndpointParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final authTokenParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final userIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final extrasParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final object = ConfigurationEntity(
          id: idParam,
          currentDeviceId: currentDeviceIdParam,
          accountKey: accountKeyParam,
          baseUrl: baseUrlParam,
          remoteEndpoint: remoteEndpointParam,
          localEndpoint: localEndpointParam,
          addSyncDeviceEndpoint: addSyncDeviceEndpointParam,
          authToken: authTokenParam,
          userId: userIdParam,
          extras: extrasParam,
        );

        return object;
      },
    ),
    SyncDeviceEntity: obx_int.EntityDefinition<SyncDeviceEntity>(
      model: _entities[2],
      toOneRelations: (SyncDeviceEntity object) => [],
      toManyRelations: (SyncDeviceEntity object) => {},
      getId: (SyncDeviceEntity object) => object.id,
      setId: (SyncDeviceEntity object, int id) {
        object.id = id;
      },
      objectToFB: (SyncDeviceEntity object, fb.Builder fbb) {
        final deviceIdOffset = fbb.writeString(object.deviceId);
        final userIdOffset = fbb.writeString(object.userId);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, deviceIdOffset);
        fbb.addOffset(2, userIdOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final deviceIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final userIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = SyncDeviceEntity(
          id: idParam,
          deviceId: deviceIdParam,
          userId: userIdParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DataEntity] entity fields to define ObjectBox queries.
class DataEntity_ {
  /// See [DataEntity.id].
  static final id = obx.QueryIntegerProperty<DataEntity>(
    _entities[0].properties[0],
  );

  /// See [DataEntity.data].
  static final data = obx.QueryStringProperty<DataEntity>(
    _entities[0].properties[1],
  );

  /// See [DataEntity.tableName].
  static final tableName = obx.QueryStringProperty<DataEntity>(
    _entities[0].properties[2],
  );

  /// See [DataEntity.entityId].
  static final entityId = obx.QueryStringProperty<DataEntity>(
    _entities[0].properties[3],
  );

  /// See [DataEntity.operation].
  static final operation = obx.QueryStringProperty<DataEntity>(
    _entities[0].properties[4],
  );

  /// See [DataEntity.entity].
  static final entity = obx.QueryStringProperty<DataEntity>(
    _entities[0].properties[5],
  );

  /// See [DataEntity.isSynced].
  static final isSynced = obx.QueryBooleanProperty<DataEntity>(
    _entities[0].properties[6],
  );
}

/// [ConfigurationEntity] entity fields to define ObjectBox queries.
class ConfigurationEntity_ {
  /// See [ConfigurationEntity.id].
  static final id = obx.QueryIntegerProperty<ConfigurationEntity>(
    _entities[1].properties[0],
  );

  /// See [ConfigurationEntity.currentDeviceId].
  static final currentDeviceId = obx.QueryStringProperty<ConfigurationEntity>(
    _entities[1].properties[1],
  );

  /// See [ConfigurationEntity.accountKey].
  static final accountKey = obx.QueryStringProperty<ConfigurationEntity>(
    _entities[1].properties[2],
  );

  /// See [ConfigurationEntity.baseUrl].
  static final baseUrl = obx.QueryStringProperty<ConfigurationEntity>(
    _entities[1].properties[3],
  );

  /// See [ConfigurationEntity.remoteEndpoint].
  static final remoteEndpoint = obx.QueryStringProperty<ConfigurationEntity>(
    _entities[1].properties[4],
  );

  /// See [ConfigurationEntity.localEndpoint].
  static final localEndpoint = obx.QueryStringProperty<ConfigurationEntity>(
    _entities[1].properties[5],
  );

  /// See [ConfigurationEntity.addSyncDeviceEndpoint].
  static final addSyncDeviceEndpoint =
      obx.QueryStringProperty<ConfigurationEntity>(_entities[1].properties[6]);

  /// See [ConfigurationEntity.authToken].
  static final authToken = obx.QueryStringProperty<ConfigurationEntity>(
    _entities[1].properties[7],
  );

  /// See [ConfigurationEntity.userId].
  static final userId = obx.QueryStringProperty<ConfigurationEntity>(
    _entities[1].properties[8],
  );

  /// See [ConfigurationEntity.extras].
  static final extras = obx.QueryStringProperty<ConfigurationEntity>(
    _entities[1].properties[9],
  );
}

/// [SyncDeviceEntity] entity fields to define ObjectBox queries.
class SyncDeviceEntity_ {
  /// See [SyncDeviceEntity.id].
  static final id = obx.QueryIntegerProperty<SyncDeviceEntity>(
    _entities[2].properties[0],
  );

  /// See [SyncDeviceEntity.deviceId].
  static final deviceId = obx.QueryStringProperty<SyncDeviceEntity>(
    _entities[2].properties[1],
  );

  /// See [SyncDeviceEntity.userId].
  static final userId = obx.QueryStringProperty<SyncDeviceEntity>(
    _entities[2].properties[2],
  );
}
